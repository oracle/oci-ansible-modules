---
# Copyright (c) 2018, Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

## Common tasks for the demo
- debug: msg="Common infrastructure setup for this demo"

- name: Check pre-requisites
  fail:
    msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
  when: item not in ansible_env
  with_items:
    - "SAMPLE_COMPARTMENT_OCID"
    - "SAMPLE_AD1_NAME"
    - "SAMPLE_AD2_NAME"
    - "SAMPLE_OL_IMAGE_OCID"

- name: Create a temporary directory to house a temporary SSH keypair to connect to bastion instance
  tempfile:
    state: directory
    suffix: cert
  register: result
- set_fact:
    temp_certificates_path: "{{ result.path }}"
- name: Generate a Private Key
  openssl_privatekey:
    path: "{{ temp_certificates_path }}/private_key.pem"
    type: RSA
    size: 2048
- set_fact:
    demo_ssh_public_key: "{{ temp_certificates_path }}/public_key.pem"
- name: Generate a Public Key
  openssl_publickey:
    path: "{{ demo_ssh_public_key }}"
    privatekey_path: "{{ temp_certificates_path }}/private_key.pem"
    format: OpenSSH

- debug:
    msg: "Using generated keys at {{ temp_certificates_path }} to launch instances."

- name: Create a VCN for the demo
  oci_vcn:
    compartment_id: "{{ demo_compartment_ocid }}"
    display_name: "{{ demo_vcn_name }}"
    cidr_block: "{{ demo_vcn_cidr_block }}"
    dns_label: "{{ demo_vcn_dns_label }}"
  register: demovcn
- set_fact:
    demo_vcn_ocid: "{{ demovcn.vcn.id }}"
    demo_vcn_dns_label: "{{ demovcn.vcn.dns_label }}"

- name: Create demo Internet Gateway
  oci_internet_gateway:
    compartment_id: "{{ demo_compartment_ocid }}"
    vcn_id: "{{ demo_vcn_ocid }}"
    name: "{{ demo_ig_display_name }}"
    enabled: 'yes'
    state: 'present'
  register: demoig

- set_fact:
    demo_ig_ocid: "{{ demoig.internet_gateway.id }}"
  
- name: Create route table to connect internet gateway to the demo VCN
  oci_route_table:
    compartment_id: "{{ demo_compartment_ocid }}"
    vcn_id: "{{ demo_vcn_ocid }}"
    name: "{{ demo_core_route_table_name }}"
    route_rules: "{{ demo_core_route_table_rules }}"
    state: 'present'
  register: democoreroutetable

- set_fact:
    demo_core_rt_ocid: "{{ democoreroutetable.route_table.id }}"

# Use a jinja2 template of the ingress and egress security rules to generate
# a templated version of the final rules.
- name: create ingress rules yaml body
  template: src=templates/demo_public_subnet_ingress_security_rules.yaml.j2 dest=/tmp/demo_public_subnet_ingress_security_rules.yaml
- name: create egress yaml body
  template: src=templates/demo_public_subnet_egress_security_rules.yaml.j2 dest=/tmp/demo_public_subnet_egress_security_rules.yaml

# Load the variables defined in the generated files
- name: load the variables defined in the ingress rules yaml body
  include_vars:
    file: /tmp/demo_public_subnet_ingress_security_rules.yaml
    name: loaded_ingress
- name: print loaded_ingress
  debug:
    msg: "loaded ingress is {{loaded_ingress}}"
- name: load the variables defined in the egress rules yaml body
  include_vars:
    file: /tmp/demo_public_subnet_egress_security_rules.yaml
    name: loaded_egress
- name: print loaded_egress
  debug:
    msg: "loaded egress is {{loaded_egress}}"

- name: Create Public Subnet's security list
  oci_security_list:
    name: "{{ demo_public_subnet_security_list_name }}"
    compartment_id: "{{ demo_compartment_ocid }}"
    vcn_id: "{{ demo_vcn_ocid }}"
    ingress_security_rules: "{{ loaded_ingress.demo_public_subnet_ingress_security_rules }}"
    egress_security_rules: "{{ loaded_egress.demo_public_subnet_egress_security_rules }}"
    state: 'present'
  register: demopublicsubnetseclist
- set_fact:
    demo_public_subnet_seclist_ocid: "{{ demopublicsubnetseclist.security_list.id}}"


